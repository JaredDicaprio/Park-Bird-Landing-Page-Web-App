{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useLayoutEffect, useContext, useRef } from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport Head from \"next/head\";\nimport AOS from \"aos\";\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\nimport ModalVideo from \"../ModalVideo\";\nimport GlobalContext from \"../../context/GlobalContext\";\nimport GlobalStyle from \"../../utils/globalStyle\";\nimport imgFavicon from \"../../assets/favicon.png\";\nimport { get, merge } from \"lodash\"; // the full theme object\n\nimport { theme as baseTheme } from \"../../utils\";\nconst Loader = styled.div.withConfig({\n  displayName: \"Layout__Loader\",\n  componentId: \"sc-1h63nic-0\"\n})([\"position:fixed;top:0;left:0;width:100vw;height:100vh;background:#fff;z-index:9999999999;opacity:1;visibility:visible;transition:all 1s ease-out 1.5s;&.inActive{opacity:0;visibility:hidden;}\"]); // options for different color modes\n\nconst modes = {\n  light: \"light\",\n  dark: \"dark\"\n}; // merge the color mode with the base theme\n// to create a new theme object\n\nconst getTheme = mode => merge({}, baseTheme, {\n  colors: get(baseTheme.colors.modes, mode, baseTheme.colors)\n});\n\nconst Layout = ({\n  children,\n  pageContext\n}) => {\n  const gContext = useContext(GlobalContext);\n  const {\n    0: visibleLoader,\n    1: setVisibleLoader\n  } = useState(true);\n  useLayoutEffect(() => {\n    AOS.init();\n    setVisibleLoader(false);\n  }, []); // Navbar style based on scroll\n\n  const eleRef = useRef();\n  useEffect(() => {\n    window.addEventListener(\"popstate\", function (event) {\n      // The popstate event is fired each time when the current history entry changes.\n      gContext.closeAbout();\n      gContext.closeContact();\n      gContext.closeOffcanvas();\n    }, false);\n    window.addEventListener(\"pushState\", function (event) {\n      // The pushstate event is fired each time when the current history entry changes.\n      gContext.closeAbout();\n      gContext.closeContact();\n      gContext.closeOffcanvas();\n    }, false);\n  }, [gContext]);\n\n  if (pageContext.layout === \"bare\") {\n    return __jsx(ThemeProvider, {\n      theme: gContext.themeDark ? getTheme(modes.dark) : getTheme(modes.light)\n    }, __jsx(GlobalStyle, null), __jsx(Head, null, __jsx(\"title\", null, \"Omega\"), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      href: imgFavicon\n    })), __jsx(Loader, {\n      id: \"loading\",\n      className: visibleLoader ? \"\" : \"inActive\"\n    }, __jsx(\"div\", {\n      className: \"load-circle\"\n    }, __jsx(\"span\", {\n      className: \"one\"\n    }))), __jsx(\"div\", {\n      className: \"site-wrapper overflow-hidden\",\n      ref: eleRef\n    }, children), __jsx(ModalVideo, null));\n  }\n\n  return __jsx(React.Fragment, null, __jsx(ThemeProvider, {\n    theme: gContext.themeDark ? getTheme(modes.dark) : getTheme(modes.light)\n  }, __jsx(GlobalStyle, null), __jsx(Head, null, __jsx(\"title\", null, \"Omega\"), __jsx(\"link\", {\n    rel: \"icon\",\n    type: \"image/png\",\n    href: imgFavicon\n  })), __jsx(Loader, {\n    id: \"loading\",\n    className: visibleLoader ? \"\" : \"inActive\"\n  }, __jsx(\"div\", {\n    className: \"load-circle\"\n  }, __jsx(\"span\", {\n    className: \"one\"\n  }))), __jsx(\"div\", {\n    className: \"site-wrapper overflow-hidden\",\n    ref: eleRef\n  }, __jsx(Header, {\n    isDark: gContext.headerDark\n  }), children, __jsx(Footer, {\n    isDark: gContext.footerDark\n  })), __jsx(ModalVideo, null)));\n};\n\nexport default Layout;","map":null,"metadata":{},"sourceType":"module"}